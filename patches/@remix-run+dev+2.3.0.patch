diff --git a/node_modules/@remix-run/dev/.DS_Store b/node_modules/@remix-run/dev/.DS_Store
new file mode 100644
index 0000000..81547b8
Binary files /dev/null and b/node_modules/@remix-run/dev/.DS_Store differ
diff --git a/node_modules/@remix-run/dev/dist/.DS_Store b/node_modules/@remix-run/dev/dist/.DS_Store
new file mode 100644
index 0000000..5524d0f
Binary files /dev/null and b/node_modules/@remix-run/dev/dist/.DS_Store differ
diff --git a/node_modules/@remix-run/dev/dist/vite/.DS_Store b/node_modules/@remix-run/dev/dist/vite/.DS_Store
new file mode 100644
index 0000000..6800584
Binary files /dev/null and b/node_modules/@remix-run/dev/dist/vite/.DS_Store differ
diff --git a/node_modules/@remix-run/dev/dist/vite/plugin.js b/node_modules/@remix-run/dev/dist/vite/plugin.js
index 2a9bc70..0e18079 100644
--- a/node_modules/@remix-run/dev/dist/vite/plugin.js
+++ b/node_modules/@remix-run/dev/dist/vite/plugin.js
@@ -14,20 +14,23 @@ Object.defineProperty(exports, '__esModule', { value: true });
 
 var node_crypto = require('node:crypto');
 var path = require('node:path');
-var fse = require('fs-extra');
+
 var babel = require('@babel/core');
 var esModuleLexer = require('es-module-lexer');
+var fse = require('fs-extra');
 var jsesc = require('jsesc');
 var pick = require('lodash/pick');
 var pc = require('picocolors');
+
 var config = require('../config.js');
 var invariant = require('../invariant.js');
+
+var legacyCssImports = require('./legacy-css-imports.js');
 var adapter = require('./node/adapter.js');
-var styles = require('./styles.js');
-var vmod = require('./vmod.js');
 var removeExports = require('./remove-exports.js');
-var legacyCssImports = require('./legacy-css-imports.js');
 var replaceImportSpecifier = require('./replace-import-specifier.js');
+var styles = require('./styles.js');
+var vmod = require('./vmod.js');
 
 function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
 
@@ -60,7 +63,7 @@ var pc__default = /*#__PURE__*/_interopDefaultLegacy(pc);
 
 // We reassign the "vite" variable from a dynamic import of Vite's ESM build
 // when the Vite plugin's config hook is executed
-// eslint-disable-next-line @typescript-eslint/consistent-type-imports
+ 
 let vite;
 const supportedRemixConfigKeys = ["appDirectory", "assetsBuildDirectory", "future", "ignoredRouteFiles", "publicPath", "routes", "serverBuildPath", "serverModuleFormat"];
 let serverEntryId = vmod.id("server-entry");
@@ -176,7 +179,7 @@ const showUnstableWarning = () => {
   console.warn(pc__default["default"].yellow("\n  ⚠️  Remix support for Vite is unstable\n     and not recommended for production\n"));
 };
 const getViteMajorVersion = () => {
-  let vitePkg = require("vite/package.json");
+  let vitePkg = require(path.resolve("node_modules/vite/package.json"));
   return parseInt(vitePkg.version.split(".")[0]);
 };
 const remixVitePlugin = (options = {}) => {
